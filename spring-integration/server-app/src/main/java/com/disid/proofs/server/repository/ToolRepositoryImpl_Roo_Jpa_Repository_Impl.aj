// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.disid.proofs.server.repository;

import com.disid.proofs.server.domain.QTool;
import com.disid.proofs.server.domain.Tool;
import com.disid.proofs.server.repository.ToolRepositoryCustom;
import com.disid.proofs.server.repository.ToolRepositoryImpl;
import com.querydsl.core.types.Path;
import com.querydsl.jpa.JPQLQuery;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.jpa.repository.support.QueryDslRepositorySupportExt.AttributeMappingBuilder;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.transaction.annotation.Transactional;

privileged aspect ToolRepositoryImpl_Roo_Jpa_Repository_Impl {
    
    declare parents: ToolRepositoryImpl implements ToolRepositoryCustom;
    
    declare @type: ToolRepositoryImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ToolRepositoryImpl.NAME = "name";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ToolRepositoryImpl.DESCRIPTION = "description";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ToolRepositoryImpl.CODE = "code";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ToolRepositoryImpl.SIZE = "size";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ToolRepositoryImpl.COMPANY = "company";
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Tool> ToolRepositoryImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        
        QTool tool = QTool.tool;
        
        JPQLQuery<Tool> query = from(tool);
        
        Path<?>[] paths = new Path<?>[] {tool.name,tool.description,tool.code,tool.size,tool.company};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(NAME, tool.name)
			.map(DESCRIPTION, tool.description)
			.map(CODE, tool.code)
			.map(SIZE, tool.size)
			.map(COMPANY, tool.company);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, tool);
    }
    
}
