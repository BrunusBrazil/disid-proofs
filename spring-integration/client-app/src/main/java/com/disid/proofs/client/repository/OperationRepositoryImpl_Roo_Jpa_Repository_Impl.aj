// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.disid.proofs.client.repository;

import com.disid.proofs.client.domain.Operation;
import com.disid.proofs.client.domain.Person;
import com.disid.proofs.client.domain.QOperation;
import com.disid.proofs.client.domain.Tool;
import com.disid.proofs.client.repository.OperationRepositoryCustom;
import com.disid.proofs.client.repository.OperationRepositoryImpl;
import com.querydsl.core.types.Path;
import com.querydsl.jpa.JPQLQuery;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.jpa.repository.support.QueryDslRepositorySupportExt.AttributeMappingBuilder;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;

privileged aspect OperationRepositoryImpl_Roo_Jpa_Repository_Impl {
    
    declare parents: OperationRepositoryImpl implements OperationRepositoryCustom;
    
    declare @type: OperationRepositoryImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String OperationRepositoryImpl.TITLE = "title";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String OperationRepositoryImpl.PERSON = "person";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String OperationRepositoryImpl.TOOLS = "tools";
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Operation> OperationRepositoryImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        
        QOperation operation = QOperation.operation;
        
        JPQLQuery<Operation> query = from(operation);
        
        Path<?>[] paths = new Path<?>[] {operation.title,operation.person,operation.tools};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(TITLE, operation.title)
			.map(PERSON, operation.person)
			.map(TOOLS, operation.tools);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, operation);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param person
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Operation> OperationRepositoryImpl.findByPerson(Person person, GlobalSearch globalSearch, Pageable pageable) {
        
        QOperation operation = QOperation.operation;
        
        JPQLQuery<Operation> query = from(operation);
        
        Assert.notNull(person, "person is required");
        
        query.where(operation.person.eq(person));
        Path<?>[] paths = new Path<?>[] {operation.title,operation.person,operation.tools};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(TITLE, operation.title)
			.map(PERSON, operation.person)
			.map(TOOLS, operation.tools);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, operation);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param tools
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Operation> OperationRepositoryImpl.findByTools(Tool tools, GlobalSearch globalSearch, Pageable pageable) {
        
        QOperation operation = QOperation.operation;
        
        JPQLQuery<Operation> query = from(operation);
        
        Assert.notNull(tools, "tools is required");
        
        query.where(operation.tools.eq(tools));
        Path<?>[] paths = new Path<?>[] {operation.title,operation.person,operation.tools};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(TITLE, operation.title)
			.map(PERSON, operation.person)
			.map(TOOLS, operation.tools);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, operation);
    }
    
}
