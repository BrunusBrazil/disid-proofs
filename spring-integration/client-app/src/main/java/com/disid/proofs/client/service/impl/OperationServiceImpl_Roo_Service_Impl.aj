// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.disid.proofs.client.service.impl;

import com.disid.proofs.client.domain.Operation;
import com.disid.proofs.client.domain.Person;
import com.disid.proofs.client.repository.OperationRepository;
import com.disid.proofs.client.service.impl.OperationServiceImpl;
import io.springlets.data.domain.GlobalSearch;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

privileged aspect OperationServiceImpl_Roo_Service_Impl {
    
    declare @type: OperationServiceImpl: @Service;
    
    declare @type: OperationServiceImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private OperationRepository OperationServiceImpl.operationRepository;
    
    /**
     * TODO Auto-generated constructor documentation
     * 
     * @param operationRepository
     */
    @Autowired
    public OperationServiceImpl.new(OperationRepository operationRepository) {
        setOperationRepository(operationRepository);
    }

    /**
     * TODO Auto-generated method documentation
     * 
     * @return OperationRepository
     */
    public OperationRepository OperationServiceImpl.getOperationRepository() {
        return operationRepository;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param operationRepository
     */
    public void OperationServiceImpl.setOperationRepository(OperationRepository operationRepository) {
        this.operationRepository = operationRepository;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param operation
     */
    @Transactional
    public void OperationServiceImpl.delete(Operation operation) {
        // Clear bidirectional many-to-one child relationship with Person
        if (operation.getPerson() != null) {
            operation.getPerson().getOperations().remove(operation);
        }
        
        getOperationRepository().delete(operation);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param entities
     * @return List
     */
    @Transactional
    public List<Operation> OperationServiceImpl.save(Iterable<Operation> entities) {
        return getOperationRepository().save(entities);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     */
    @Transactional
    public void OperationServiceImpl.delete(Iterable<Long> ids) {
        List<Operation> toDelete = getOperationRepository().findAll(ids);
        getOperationRepository().deleteInBatch(toDelete);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param entity
     * @return Operation
     */
    @Transactional
    public Operation OperationServiceImpl.save(Operation entity) {
        return getOperationRepository().save(entity);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @return Operation
     */
    public Operation OperationServiceImpl.findOne(Long id) {
        return getOperationRepository().findOne(id);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @return Operation
     */
    public Operation OperationServiceImpl.findOneForUpdate(Long id) {
        return getOperationRepository().findOneDetached(id);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @return List
     */
    public List<Operation> OperationServiceImpl.findAll(Iterable<Long> ids) {
        return getOperationRepository().findAll(ids);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return List
     */
    public List<Operation> OperationServiceImpl.findAll() {
        return getOperationRepository().findAll();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Long
     */
    public long OperationServiceImpl.count() {
        return getOperationRepository().count();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Operation> OperationServiceImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        return getOperationRepository().findAll(globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param person
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Operation> OperationServiceImpl.findByPerson(Person person, GlobalSearch globalSearch, Pageable pageable) {
        return getOperationRepository().findByPerson(person, globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param person
     * @return Long
     */
    public long OperationServiceImpl.countByPerson(Person person) {
        return getOperationRepository().countByPerson(person);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Class
     */
    public Class<Operation> OperationServiceImpl.getEntityType() {
        return Operation.class;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Class
     */
    public Class<Long> OperationServiceImpl.getIdType() {
        return Long.class;
    }
    
}
